---
import Biground from "../components/objects/Biground.astro";
import Littleround from "../components/objects/Littleround.astro";
import "./stylesheet/main.scss";
export interface Props {
  title: string;
}

const { title } = Astro.props;
---

<!DOCTYPE html>
<html lang="en">
  <head>
    <meta charset="UTF-8" />
    <meta name="viewport" content="width=device-width" />
    <link rel="icon" type="image/svg+xml" href="/favicon.svg" />
    <meta name="generator" content={Astro.generator} />
    <title>{title}</title>
  </head>
  <Biground left='58%' top='8%'/>
  <Biground left='49%' top='36%'/>
  <Biground left='49%' top='69%'/>
  <Littleround left='-38%' top='26%'/>
  <Littleround left='-38%' top='55%'/>
  <body>
    <slot />
  </body>
</html>

<script >
  import gsap from "gsap";
  import {ScrollTrigger} from "gsap/ScrollTrigger";
  import {CustomEase} from "gsap/CustomEase";
  import { animateNav } from "./utils/animheader";

  gsap.registerPlugin(ScrollTrigger, CustomEase);

  var ease1 = CustomEase.create("ease1", "0.165, 0.84, 0.44, 1");
  
  window.addEventListener("load", () => {

    animateNav()
  })
  //-----------------
  const animLeftElements: string[] = gsap.utils.toArray("[anim-left]");
  
  animLeftElements.forEach((animLeftElement) => {
    
    gsap.from(animLeftElement, {
      scrollTrigger: {
        trigger: animLeftElement,
        start: "top 90%",
        end: "bottom top",
        once: true
      },
      duration: 1.5,
      x:"100%",
      ease: 'ease1'

      
    })
  })
  //-----------------
  const animRightElements: string[] = gsap.utils.toArray("[anim-right]");
  
  animRightElements.forEach((animRightElement) => {
    
    gsap.from(animRightElement, {
      scrollTrigger: {
        trigger: animRightElement,
        start: "top 90%",
        end: "bottom top",
        once: true
      },
      duration: 1,
      x:"-100%",
      ease: 'ease1'
      
    })
  })

  //-----------------
  
  const animBottomElements: string[] = gsap.utils.toArray("[anim-bottom]");
  
  animBottomElements.forEach((animBottomElement) => {
    
    gsap.from(animBottomElement, {
      scrollTrigger: {
        trigger: animBottomElement,
        start: "top 99%",
        end: "bottom top",
        once: true
      },
      duration: 1.5,
      opacity: 0,
      y:"200%",
      ease: 'ease1'
      
    })
  })


  //-----------------
  
  const animBottomLittleElements: string[] = gsap.utils.toArray("[anim-bottom-little]");
  
  animBottomLittleElements.forEach((animBottomLittleElement) => {
    
    gsap.from(animBottomLittleElement, {
      scrollTrigger: {
        trigger: animBottomLittleElement,
        start: "top top",
        end: "top top",
        once: true
        
      },
      duration: 1,
      opacity: 0,
      y:"5%",
      ease: 'ease1'
      
    })
  })

  //-----------------
  
  const animOpacityLowElements: string[] = gsap.utils.toArray("[anim-opacity-low]");
  
  animOpacityLowElements.forEach((animOpacityLowElement) => {
    
    gsap.from(animOpacityLowElement, {
      scrollTrigger: {
        trigger: animOpacityLowElement,
        start: "top 99%",
        end: "bottom top",
        once: true
      },
      duration: 4,
      opacity:"0",
      ease: 'ease1'
      
    })
  })

  //-----------------
  
  const animOpacityElements: string[] = gsap.utils.toArray("[anim-opacity]");
  
  animOpacityElements.forEach((animOpacityElement) => {
    
    gsap.from(animOpacityElement, {
      scrollTrigger: {
        trigger: animOpacityElement,
        start: "top 99%",
        end: "bottom top",
        once: true
      },
      duration: 2,
      opacity:"0",
      ease: 'ease1'
      
    })
  })

  //-----------------
  
  const animLeftOpacityElements: string[] = gsap.utils.toArray("[anim-left-opacity]");
  
  animLeftOpacityElements.forEach((animLeftOpacityElement) => {
    
    gsap.from(animLeftOpacityElement, {
      scrollTrigger: {
        trigger: animLeftOpacityElement,
        start: "top 99%",
        end: "bottom top",
        once: true
      },
      duration: 2,
      x:"30%",
      opacity:0,
      ease: 'ease1'
      
    })
  })

  // ---------------------------

  const items = document.querySelectorAll(".numberdata");

gsap.from(items, {
  textContent: 0,
  duration: 2,
  ease: "power1.in",
  snap: { textContent: 2 },
  stagger: {
    each: 1.0,
    onUpdate: function() {
      this.targets()[0].innerHTML = numberWithCommas(Math.ceil(this.targets()[0].textContent));
    },
  }
});


function numberWithCommas(x) {
  return x.toString().replace(/\B(?=(\d{3})+(?!\d))/g, ",");
}
  //-----------------
  
  const animscaleElements: string[] = gsap.utils.toArray("[anim-scale]");
  
  animscaleElements.forEach((animscaleElement) => {
    
    gsap.from(animscaleElement, {
      scrollTrigger: {
        trigger: animscaleElement,
        start: "top 99%",
        end: "bottom top",
        once: true
      },
      duration: 2,
      scale: 0,
      ease: 'ease1'
      
    })
  })
    
  
</script>
